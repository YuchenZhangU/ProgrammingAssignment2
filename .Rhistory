a <- available.package()
available.package()
q()
q()
x <- list(a=1:5,b=rnorm((10)))
lapply(x,mean)
lapply(x,mean)
x <- list(a=1:5,b=rnorm((10)))
lapply(x,mean)
y<-lapply(x,mean)
class(y)
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x,mean)
runif(1)
runif(10)
x <- 1:4
runif(x)
lapply(x,runif)
runif(1,min=0,max=10)
lapply(x,runif,min=0,max=10)
x <- list(a=matrix(1:4,2,2),b=matrix(1:6,3,2))
lapply(x,function(elt){elt[,1]})
lapply(x,function(elt){elt[1,]})
x[[a]]
x[['a']]
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x,mean)
sapply(x,mean)
mean(sapply(x,mean))
x <- matrix(rnorm(200), 20, 10)
apply(x,2,mean)
apply(x,1,mean)
class(apply(x,1,mean))
x
apply(x,1,quantile,probs = c(0.25,0.75))
class(apply(x,1,quantile,probs = c(0.25,0.75)))
mat <- apply(x,1,quantile,probs = c(0.25,0.75))
mat.T
t(mat)
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
a
rnorm(2 * 2 * 10)
rnorm(2 * 2 )
class(a)
seed(1)
apply(a, c(1, 2), mean)
apply(a, 1, mean)
rowMeans(apply(a, c(1, 2), mean))
mapply(rep,1:4,4:1)
?rep
rep(c(1,3),1)
rep(c(1,3),2)
rep(c(1,3),each = 2)
rep(c(1,3),each = 3)
rep(c(1,3),2,each = 3)
rep(c(1,3),each = 1:3)
mapply(rep,c(1,3),each = 3))
mapply(rep,c(1,3),each = 3)
class(1:4)
rep(c(1,3))
mapply(rep,c(1,3))
mapply(rep,c(1,3),c(3,1))
mapply(rep,c(c(1,2),3),c(3,1))
mapply(rep,list(c(1,2),3),c(3,1))
mapply(rep,list(c(1,2),3),c(3,5))
mapply(rep,list(c(1,2),c(3,4)),c(3,5))
mapply(rep,list(c(1,2),c(3,4)),c(3,5),each=2)
mapply(rep,list(c(1,2),c(3,4)),c(3,5),each=c(2,3)
mapply(rep,list(c(1,2),c(3,4)),c(3,5),each=c(2,3))
rep(list(c(1,2),c(3,4)),c(3,5),each=c(2,3))
rep(c(1,3),each=c(2,3))
gl(3,10)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3,10)
tapple(x,f,mean())
tapple(x,f,mean)
tapply(x,f,mean)
calss(tapply(x,f,mean))
class(tapply(x,f,mean))
a <- tapply(x,f,mean)
a[1]
a <- tapply(x,f,mean,simplify = FALSE)
class(a)
a
a$1
a$'1'
a[1]
a[2]
class(a[1])
a[1][1]
a[1][[1]
a[1][[1]]
tapply(x,f,range)
a<-tapply(x,f,range)
class(a[1])
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f
split(x,f)
lapple(split(x,f),mean)
lapply(split(x,f),mean)
library(datasets)
head(airquality)
s<-split(airquality,airquality$Month)
s
airquality[, c("Ozone", "Solar.R", "Wind")]
class(airquality[, c("Ozone", "Solar.R", "Wind")])
colMeans(airquality[, c("Ozone", "Solar.R", "Wind")])
lapply(s,function(x){colMeans(x[,c('Ozone','Solar.r','wind')])})
colMeans(airquality[, c("Ozone", "Solar.R", "Wind")])
lapply(s,function(x){colMeans(x[,c('Ozone','Solar.R','Wind')])})
lapply(split(airquality,airquality$Month,drop = TRUE),function(x){colMeans(x[,c('Ozone','Solar.R','Wind')])})
sapply(s,function(x){colMeans(x[,c('Ozone','Solar.R','Wind')])})
sapply(s,function(x){colMeans(x[,c('Ozone','Solar.R','Wind')],na.rm = TRUE)})
> x <- rnorm(10)
> f1 <- gl(2, 5)
> f2 <- gl(5, 2)
x <- rnorm(10)
f1 <- gl(2, 5)
f2 <- gl(5, 2)
interaction(f1,f2)
x
split(x,list(f1,f2))
f1
f2
print(split(x,list(f1,f2)))
str(split(x,list(f1,f2)))
str(split(x,list(f1,f2),drop = TRUE))
log(-1)
1/0
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(1)
printmessage(NA)
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
}
printmessage(1)
printmessage(NA)
?invisible
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
}
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
}
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
x}
printmessage(1)
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
x;invisible(x)}
printmessage(1)
log(-1)
traceback()
y
remove all
ls(0)
ls
ls()
lm(a,b)
traceback()
debug(lm)
lm(a,b)
options(error=recover)
read.csv('no')
data(iris)
head(iris)
iris['Sepal.Length']
mean(iris['Sepal.Length'])
colMeans(iris['Sepal.Length'],rm.na)
colMeans(iris[,'Sepal.Length'],rm.na)
class(iris)
mean(iris['Sepal.Length'])
colMeans(iris['Sepal.Length'])
f = split(iris,iris$Species)
sapply(f,colMeans)
sapply(f,function(x){colMeans(x['Sepal.Length'])})
head(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
head(f)
apply(f$virginica[, 1:4], 2, mean)
colMeans(iris)
colMeans(iris[,1:4])
data(mtcars)
head(mtcars)
head(mtcars)
?mtcars
with(mtcars, tapply(mpg, cyl, mean))
?with
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mpg, cyl, mean)
aq <- within(airquality, {     # Notice that multiple vars can be changed
lOzone <- log(Ozone)
Month <- factor(month.abb[Month])
cTemp <- round((Temp - 32) * 5/9, 1) # From Fahrenheit to Celsius
S.cT <- Solar.R / cTemp  # using the newly created variable
rm(Day, Temp)
})
head(aq)
head(airquality)
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$mpg,mtcars$cyl,tapply$mean)
mtcars
length(mtcars)
size(mtcars)
dim(mtcars)
f1 <- gl(32,1)
head(f1)
f1 <- gl(1,32)
head(f1)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(mpg, f1, mean))
within(mtcars, tapply(mpg, f1, mean))
within(mtcars, tapply(mpg, cyl, mean))
with(mtcars,tapply(hp,cyl,mean))
a<-with(mtcars,tapply(hp,cyl,mean))
a
a[3]
a[3]-a[1]
a['8']-a[1]
head(airquality)
within(airquality,airquality[,Ozone<40]<-1)
within(airquality,Ozone[Ozone<40]<-1)
head(airquality)
with(airquality,Ozone[Ozone<40]<-1)
a<-with(airquality,Ozone[Ozone<40]<-1)
a
a<-with(airquality,Ozone[Ozone<40]==41)
a
a<-with(airquality,airquality[Ozone[Ozone<40]==41])
a<-with(airquality,airquality[,Ozone[Ozone<40]==41])
a<-with(airquality,airquality[Ozone[Ozone<40]==41,])
a
with(airquality,airquality[Ozone>40])
with(airquality,airquality[Ozone>40,])
complete.cases(airquality)
aq2<-airquality[complete.cases(airquality),]
aq2
dim(aq2)
dim(aq2,1)
nrow(aq2)
NROW(aq2)
rownames(aq2)<- 1:nrow(aq2)
aq2
rm(list = ls())
ls()
swirl
swirl()
library(swirl)
swilr(0)
swilr()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
character(cls_list)
swirl()
swirl()
library(swirl)
swirl(0)
character(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect <-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
sapply(flag_colors,sum)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flag[,19:23]
flag_shapes <- flags[,19:23]
lapple(flag_shapes,range)
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
length(unique_vals)
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
swirl()
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
getwd()
setwd('../Dropbox/2016Spring/JohnH/JH2_DS_R/w3/PrgrammingAssignment2/')
source('cachevector.R')
makeVector(x=1:4)
x$get
x <- makeVector(x=1:4)
x$get()
x$getmean()
x$setmean(3)
x$get()
x$getmean()
x <- makeVector(x = 1:10)
x$get()
cachemean(x)
x$getmean()
x <- makeVector(x = 1:10)
x$get()
x$getmean()
cachemean(x)
x$getmean()
mat <- matrix(1:9,3,3)
mat
solve(mat)
mat <- matrix(c(1,2,2,3),2,2)
solve(mat)
source('cachematrix.R')
makeCacheMatrix(x=matrix(c(1,2,2,3),2,2))
mat <- makeCacheMatrix(x=matrix(c(1,2,2,3),2,2))
mat
mat$get()
mat$getinv()
mat$setinv(solve(mat$get))
solve(mat$get())
mat$setinv(solve(mat$get()))
mat$getinv
mat$getinv()
x=matrix(c(1,2,2,3),2,2)
mat <- makeCacheMatrix(x)
mat$get()
mat$getinv()
mat$setinv(solve(mat$get()))
mat$getinv()
?solve
source('cachematrix.R')
mat <- makeCacheMatrix(x)
mat$get()
mat$getinv()
cacheSolve(mat)
mat$getinv()
